import{ac as r,i}from"./index-B605mWSS.js";import{u as n}from"./projects-DhOs14FM.js";const h=r("healthCheck",{state:()=>({endpoints:[],results:[],endpoint:{},stats:null,isLoading:!1,isAdding:!1,projectStore:n()}),actions:{async fetchEndpoints(e){try{this.isLoading=!0,this.endpoints=await i.get(`/projects/${e}/healthcheck`)}catch(t){throw console.error("Failed to fetch endpoints:",t),t}finally{this.isLoading=!1}},async fetchEndpointResults(e){try{this.isLoading=!0;const t=await i.get(`/healthcheck/${e}`);this.results=t.data,this.stats=t.stats,this.endpoint=t.endpoint}catch(t){throw console.error("Failed to fetch endpoint results:",t),t}finally{this.isLoading=!1}},async addEndpoint(e,t){try{this.isAdding=!0,await i.post(`/healthcheck/${e}`,t),await this.fetchEndpoints(e)}catch(s){throw console.error("Failed to add endpoint:",s),s}finally{this.isAdding=!1}},async toggleEndpointStatus(e){try{const t=this.endpoints.find(o=>o.id===e);if(!t)return;const s=!t.is_active;await i.patch(`/healthcheck/${e}`,{is_active:s}),t.is_active=s}catch(t){throw console.error("Failed to toggle endpoint status:",t),t}},async deleteEndpoint(e,t){try{await i.delete(`/healthcheck/${e}`),this.endpoints=this.endpoints.filter(s=>s.id!==e),await this.projectStore.fetchProject(t)}catch(s){throw console.error("Failed to delete endpoint:",s),s}}},getters:{chartData(){const e={};return this.results.forEach(t=>{const o=`${new Date(t.created_at).getHours().toString().padStart(2,"0")}:00`;e[o]||(e[o]={sum:0,count:0,response_time:0}),e[o].sum+=t.response_time,e[o].count++,e[o].response_time+=t.response_time}),Object.entries(e).map(([t,s])=>({hour:t,avg_time:Math.round(s.sum/s.count),response_time:s.response_time})).sort((t,s)=>t.hour.localeCompare(s.hour))}}});export{h as u};
