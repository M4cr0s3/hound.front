import{ab as i,al as o}from"./index-DkP3bkHo.js";const r=i("healthCheck",{state:()=>({endpoints:[],results:[],endpoint:{},stats:null,isLoading:!1,isAdding:!1}),actions:{async fetchEndpoints(e){try{this.isLoading=!0;const t=await o.get(`/projects/${e}/healthcheck`);this.endpoints=t.data}catch(t){throw console.error("Failed to fetch endpoints:",t),t}finally{this.isLoading=!1}},async fetchEndpointResults(e){try{this.isLoading=!0;const t=await o.get(`/healthcheck/${e}`);this.results=t.data.data,this.stats=t.data.stats,this.endpoint=t.data.endpoint}catch(t){throw console.error("Failed to fetch endpoint results:",t),t}finally{this.isLoading=!1}},async addEndpoint(e,t){try{this.isAdding=!0,await o.post(`/healthcheck/${e}`,t),await this.fetchEndpoints(e)}catch(s){throw console.error("Failed to add endpoint:",s),s}finally{this.isAdding=!1}},async toggleEndpointStatus(e){try{const t=this.endpoints.find(a=>a.id===e);if(!t)return;const s=!t.is_active;await o.patch(`/healthcheck/${e}`,{is_active:s}),t.is_active=s}catch(t){throw console.error("Failed to toggle endpoint status:",t),t}},async deleteEndpoint(e){try{await o.delete(`/healthcheck/${e}`),this.endpoints=this.endpoints.filter(t=>t.id!==e)}catch(t){throw console.error("Failed to delete endpoint:",t),t}}},getters:{chartData(){const e={};return this.results.forEach(t=>{const a=`${new Date(t.created_at).getHours().toString().padStart(2,"0")}:00`;e[a]||(e[a]={sum:0,count:0}),e[a].sum+=t.response_time,e[a].count++}),Object.entries(e).map(([t,s])=>({hour:t,avg_time:Math.round(s.sum/s.count)})).sort((t,s)=>t.hour.localeCompare(s.hour))}}});export{r as u};
